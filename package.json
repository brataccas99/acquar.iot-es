{
  "name": "acquar.iot-es",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "firststart": " npm run package && npm run serve && npm run createrole && npm run createlambda && npm run startbot",
    "build": "rmdir /s /q dist & tsc -p tsconfig.json",
    "start": "node ./dist/index.js && node ./dist/setup.js",
    "setup": "node ./dist/settings/populateDB.js && node ./dist/device.js",
    "serve": "npm run build && npm run start && npm run setup && copy.bat",
    "createlambda": "aws lambda create-function --function-name offSensors --zip-file fileb://functions.zip --handler deploy/offSensors.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name onSensors --zip-file fileb://functions.zip --handler deploy/onSensors.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name offSensorAcquarium --zip-file fileb://functions.zip --handler deploy/offSensorAcquarium.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name onSensorAcquarium --zip-file fileb://functions.zip --handler deploy/onSensorAcquarium.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name generateO2 --zip-file fileb://functions.zip --handler deploy/generateO2.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name giveFoodAcquarium --zip-file fileb://functions.zip --handler deploy/giveFoodAcquarium.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566 && aws lambda create-function --function-name waterClean --zip-file fileb://functions.zip --handler deploy/waterClean.lambdaHandler --runtime nodejs18.x --role arn:aws:iam::000000000000:role/lambdarole --endpoint-url=http://localhost:4566",
    "createrole":"aws iam create-role --role-name lambdarole --assume-role-policy-document file://role_policy.json --query 'Role.Arn' --endpoint-url=http://localhost:4566 && aws iam put-role-policy --role-name lambdarole --policy-name lambdapolicy --policy-document file://policy.json --endpoint-url=http://localhost:4566",
    "startbot":"python bot/bot.py",
    "package":"docker run -d --rm -p 4566:4566 --name aws localstack/localstack:1.4 && npm i && cd deploy && npm i",
    "dev": "nodemon --exec ts-node src/index.ts",
    "dev:setup": "nodemon --exec ts-node src/setup.ts",
    "dev:populate": "nodemon --exec ts-node src/settings/populateDB.ts",
    "dev:device": "nodemon --exec ts-node src/device.ts",
    "dev:average": "nodemon --exec ts-node src/functions/average.ts",
    "dev:bot": "nodemon ./bot/index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/aws-lambda": "^8.10.115",
    "typescript": "^5.0.4"
  },
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.335.0",
    "@aws-sdk/client-sqs": "^3.335.0",
    "aws-sdk": "^2.1400.0",
    "dotenv": "^16.0.3",
    "dynamodb-admin": "^4.5.0",
    "nodemon": "^2.0.22",
    "telegraf": "^4.12.2",
    "ts-node": "^10.9.1"
  }
}
